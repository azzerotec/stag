datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String    @unique
  password Password?

  customerId         String?
  subscriptionId     String?
  priceId            String?
  subscriptionActive Boolean @default(false)

  name      String
  birthdate DateTime?
  cpf       String?
  oab       String
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Processo {
  id           String         @id @default(cuid())
  numero       String
  cliente      Cliente        @relation(fields: [clienteId], references: [id])
  data         DateTime
  clienteId    String
  notificacoes Notificacoes[]
}

model Evento {
  id        String   @id @default(cuid())
  titulo    String
  descricao String
  local     String
  data      DateTime
  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  clienteId String
}

model Tarefa {
  id                 String           @id @default(cuid())
  titulo             String
  descricao          String
  vencimento         DateTime
  atribuicao         String // Pessoa
  concluida          Boolean
  prioridade         PrioridadeTarefa @relation(fields: [prioridadeTarefaId], references: [id])
  prioridadeTarefaId String
}

model PrioridadeTarefa {
  id     String   @id @default(cuid())
  label  String // alta | media | baixa
  tarefa Tarefa[]
}

model NotificationType {
  id           String         @id @default(cuid())
  label        String // Reunião | Tarefa | Atualização
  notificacoes Notificacoes[]
}

model Notificacoes {
  id                 String           @id @default(cuid())
  processo           Processo         @relation(fields: [processoId], references: [id])
  cliente            Cliente          @relation(fields: [clienteId], references: [id])
  titulo             String
  descricao          String
  data               DateTime
  tipo               NotificationType @relation(fields: [notificationTypeId], references: [id])
  status             String // Tarefa / Reunião -> Concluida |  Atualização -> Lida. 
  processoId         String
  clienteId          String
  notificationTypeId String
}

model Cliente {
  id                       String                   @id @default(cuid())
  contato                  String
  endereco                 String
  email                    String
  pessoaFisica             PessoaFisica?
  pessoaJuridica           PessoaJuridica?
  Processo                 Processo[]
  Evento                   Evento[]
  notificacoes             Notificacoes[]
  movimentacoesFinanceiras MovimentacaoFinanceira[]
}

model PessoaFisica {
  id            String  @id @default(cuid())
  cliente       Cliente @relation(fields: [clienteId], references: [id])
  nomeCompleto  String
  rg            String
  nascimento    String
  nacionalidade String
  estadoCivil   String
  profissao     String
  nomeDaMae     String
  nomeDoPai     String
  clienteId     String  @unique
}

model PessoaJuridica {
  id               String  @id @default(cuid())
  cliente          Cliente @relation(fields: [clienteId], references: [id])
  razaoSocial      String // Imagem
  responsavelLegal String
  clienteId        String  @unique
}

model MovimentacaoFinanceiraTipo {
  id                     String                   @id @default(cuid())
  label                  String // Despesa | Receita
  movimentacaoFinanceira MovimentacaoFinanceira[]
}

model MovimentacaoFinanceira {
  id        String                     @id @default(cuid())
  cliente   Cliente                    @relation(fields: [clienteId], references: [id])
  valor     String
  data      DateTime
  discricao String
  clienteId String
  tipo      MovimentacaoFinanceiraTipo @relation(fields: [tipoId], references: [id])
  tipoId    String
}
